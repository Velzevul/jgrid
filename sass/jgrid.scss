// --- REQUIRED RESETS ---

  // apply CSS3 box model
  *, *:before, *:after {
    box-sizing: border-box;
  }


// --- DEFAULT FONT CONFIGURATIONS ---

  // need them due to reset of both properties
  // in parent container
  $font-size: 16px;
  $line-height: 30px;


// --- GRID CONFIGURATION ---
  // column fonfigurations
  $column-width: 3 * $font-size;
  $column-gutter: 1.5 * $font-size;
  $column-padding: 1 * $font-size;

  // layout configuration:
  $desktop: 12; // default number of columns, also number of columns for a IE8 fallback

  // next values determine breakpoints you will have.
  // set to false if you do not want a breakpoint
  $mobile: 6;
  $tablet: 8;
  $large: 18;


// --- MIXINS ---

  // calculate max-width for grid
  @function grid-width( $columns ){
    @return $columns * $column-width + ($columns - 1) * $column-gutter + 2 * $column-gutter;
  }

  // media query for a breakpoint at a given amount of columns
  @mixin breakpoint( $columns ){
    @media only screen and (min-width:  grid-width($columns) ) {
      @content;
    }
  }

  @mixin justify-column( $width, $context ){
    display: inline-block;
    vertical-align: top;
    text-align: left;
    text-justify: auto;
    font-size: $font-size;
    line-height: $line-height;
    margin-left:0;
    margin-right:0;
    padding-left: $column-padding;
    padding-right: $column-padding;
    width: 100% * ($width * $column-width + ($width - 1) * $column-gutter) / ($context * $column-width + ($context - 1) * $column-gutter );
  }


// --- GRID ---

  // normal grid: has fixed width
  .grid {
    font-size: 0;
    line-height: 0;
    text-align: justify;
    text-justify: distribute-all-lines; // for IE8
    padding: 0 $column-gutter;
    margin: 0 auto;
    max-width: grid-width($desktop); // IE8 fallback

    &:after {
      content: '';
      display: inline-block;
      width: 100%;
    }

    // since normal browsers will see this, they will have nice responsive mobile-first grid
    @if $mobile != false {
      @media only screen {
        max-width: grid-width($mobile);
      }
    }

    @if $tablet != false {
      @include breakpoint($tablet){
        max-width: grid-width($tablet);
      }
    }

    @include breakpoint($desktop){
      max-width: grid-width($desktop);
    }

    @if $large != false {
      @include breakpoint($large){
        max-width: grid-width($large);
      }
    }
  }

  // fluid grid (withoug max-width restrictions)
  .grid.fluid {
    max-width: 100%;
  }

  // grid with no grid padding (1st column starts exactly where grid starts)
  .grid.no-padding {
    padding: 0;
  }

  // fallback for crappy IE8
  @for $i from 1 through $desktop {
    .col-#{$i} { @include justify-column($i,$desktop);}
  }
  @for $i from 1 through $desktop {
    .prepend-#{$i} { margin-left:  100% * ($i * $column-width + $i * $column-gutter) / ($desktop * $column-width + ($desktop - 1) * $column-gutter ); }
    .append-#{$i} { margin-right: 100% * ($i * $column-width + $i * $column-gutter) / ($desktop * $column-width + ($desktop - 1) * $column-gutter ); }
  }

  // mobile-first for normal browsers
  @if $mobile != false {
    @media only screen {
      @for $i from 1 through $mobile {
        .mobile-#{$i} { @include justify-column($i,$mobile); }
      }

      @for $i from 1 through $mobile {
        .mobile-prepend-#{$i} { margin-left:  100% * ($i * $column-width + $i * $column-gutter) / ($mobile * $column-width + ($mobile - 1) * $column-gutter ); }
        .mobile-append-#{$i} { margin-right: 100% * ($i * $column-width + $i * $column-gutter) / ($mobile * $column-width + ($mobile - 1) * $column-gutter ); }
      }
    }
  }

  @if $tablet != false {
    @include breakpoint($tablet) {
      @for $i from 1 through $tablet {
        .tablet-#{$i} { @include justify-column($i,$tablet); }
      }
      @for $i from 1 through $tablet {
        .tablet-prepend-#{$i} { margin-left:  100% * ($i * $column-width + $i * $column-gutter) / ($tablet * $column-width + ($tablet - 1) * $column-gutter ); }
        .tablet-append-#{$i} { margin-right: 100% * ($i * $column-width + $i * $column-gutter) / ($tablet * $column-width + ($tablet - 1) * $column-gutter ); }
      }
    }
  }

  @include breakpoint($desktop) {
    @for $i from 1 through $desktop {
      .col-#{$i} { @include justify-column($i,$desktop); }
    }
    @for $i from 1 through $desktop {
      .prepend-#{$i} { margin-left:  100% * ($i * $column-width + $i * $column-gutter) / ($desktop * $column-width + ($desktop - 1) * $column-gutter ); }
      .append-#{$i} { margin-right: 100% * ($i * $column-width + $i * $column-gutter) / ($desktop * $column-width + ($desktop - 1) * $column-gutter ); }
    }
  }

  @if $large != false {
    @include breakpoint($large) {
      @for $i from 1 through $large {
        .large-#{$i} { @include justify-column($i,$large); }
      }
      @for $i from 1 through $large {
        .large-prepend-#{$i} { margin-left:  100% * ($i * $column-width + $i * $column-gutter) / ($large * $column-width + ($large - 1) * $column-gutter ); }
        .large-append-#{$i} { margin-right: 100% * ($i * $column-width + $i * $column-gutter) / ($large * $column-width + ($large - 1) * $column-gutter ); }
      }
    }
  }
